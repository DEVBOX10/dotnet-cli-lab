<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Arm32OptionDescription" xml:space="preserve">
    <value>Uninstall arm32 .NET Core bundles only</value>
  </data>
  <data name="BundleTypeNotSpecifiedExceptionMessage" xml:space="preserve">
    <value>Please specified the bundle type to uninstall</value>
  </data>
  <data name="CommandArgOptionConflictExceptionMessageFormat" xml:space="preserve">
    <value>Please use either command arguments or the specified option: {0}</value>
  </data>
  <data name="ElevationFailedExceptionMessage" xml:space="preserve">
    <value>Failed to run as administrator</value>
  </data>
  <data name="InvalidInputVersionExceptionMessageFormat" xml:space="preserve">
    <value>The specified version is not valid: {0}</value>
  </data>
  <data name="LinuxNotSupportedExceptionMessage" xml:space="preserve">
    <value>The Linux operating systems are not supported</value>
  </data>
  <data name="ListCommandDescription" xml:space="preserve">
    <value>List the .NET Core bundles that are installed globally on the machine</value>
  </data>
  <data name="ListCommandRuntimeHeader" xml:space="preserve">
    <value>.NET Core Runtimes:</value>
  </data>
  <data name="ListCommandSdkHeader" xml:space="preserve">
    <value>.NET Core SDKs:</value>
  </data>
  <data name="OptionsConflictExceptionMessageFormat" xml:space="preserve">
    <value>Please specify only one of the options: {0}, {1}</value>
  </data>
  <data name="RequiredArgMissingForUninstallCommandExceptionMessage" xml:space="preserve">
    <value>Required argument missing for the uninstall command</value>
  </data>
  <data name="RuntimeOptionDescription" xml:space="preserve">
    <value>Uninstall .NET Core Runtimes only</value>
  </data>
  <data name="SdkOptionDescription" xml:space="preserve">
    <value>Uninstall .NET Core SDKs only</value>
  </data>
  <data name="SpecifiedVersionNotFoundExceptionMessageFormat" xml:space="preserve">
    <value>The specified version is not found: {0}</value>
  </data>
  <data name="UninstallAllBelowOptionArgumentDescription" xml:space="preserve">
    <value>The specified .NET Core bundle version</value>
  </data>
  <data name="UninstallAllBelowOptionArgumentName" xml:space="preserve">
    <value>BUNDLE-VERSION</value>
  </data>
  <data name="UninstallAllBelowOptionDescription" xml:space="preserve">
    <value>Remove all .NET Core bundles below specified version. The specified version will remain</value>
  </data>
  <data name="UninstallAllButLatestOptionDescription" xml:space="preserve">
    <value>Remove all .NET Core bundles, except the highest version</value>
  </data>
  <data name="UninstallAllButOptionArgumentDescription" xml:space="preserve">
    <value>The specified .NET Core bundle versions to remain</value>
  </data>
  <data name="UninstallAllButOptionArgumentName" xml:space="preserve">
    <value>BUNDLE-VERSIONS</value>
  </data>
  <data name="UninstallAllButOptionDescription" xml:space="preserve">
    <value>Remove all .NET Core bundles, except those listed</value>
  </data>
  <data name="UninstallAllLowerPatchesOptionDescription" xml:space="preserve">
    <value>Remove .NET Core bundles that have been replaced by higher patches</value>
  </data>
  <data name="UninstallAllOptionDescription" xml:space="preserve">
    <value>Remove all .NET Core bundles installed globally on the machine</value>
  </data>
  <data name="UninstallAllPreviewsButLatestOptionDescription" xml:space="preserve">
    <value>Remove all .NET Core Preview bundles that are marked as previews, except the latest preview</value>
  </data>
  <data name="UninstallAllPreviewsOptionDescription" xml:space="preserve">
    <value>Remove all .NET Core Preview bundles that are marked as previews</value>
  </data>
  <data name="UninstallationFailedExceptionMessageFormat" xml:space="preserve">
    <value>Failed to wait for the uninstallation operation to complete: {0}</value>
  </data>
  <data name="UninstallationFailedExceptionWithExitCodeMessageFormat" xml:space="preserve">
    <value>The uninstallation operation failed with the exit code: {1}. Command: {0}</value>
  </data>
  <data name="UninstallMajorMinorOptionArgumentDescription" xml:space="preserve">
    <value>The specified major.minor version</value>
  </data>
  <data name="UninstallMajorMinorOptionArgumentName" xml:space="preserve">
    <value>MAJOR-MINOR</value>
  </data>
  <data name="UninstallMajorMinorOptionDescription" xml:space="preserve">
    <value>Remove .NET Core bundles that match the specified major.minor version</value>
  </data>
  <data name="UninstallNoOptionArgumentDescription" xml:space="preserve">
    <value>The specified .NET Core bundle versions to uninstall</value>
  </data>
  <data name="UninstallNoOptionArgumentName" xml:space="preserve">
    <value>BUNDLE-VERSIONS</value>
  </data>
  <data name="UninstallNoOptionDescription" xml:space="preserve">
    <value>Remove the .NET Core bundles specified</value>
  </data>
  <data name="UninstallVerbosityOptionArgumentDescription" xml:space="preserve">
    <value>The specified verbosity level</value>
  </data>
  <data name="UninstallVerbosityOptionArgumentName" xml:space="preserve">
    <value>VERBOSITY-LEVEL</value>
  </data>
  <data name="UninstallVerbosityOptionDescription" xml:space="preserve">
    <value>Set the verbosity level. Allowed values are q[uiet], m[inimal], n[ormal], d[etailed], and diag[nostic]</value>
  </data>
  <data name="UserCancelationExceptionMessage" xml:space="preserve">
    <value>The operation was canceled by the user</value>
  </data>
  <data name="X64OptionDescription" xml:space="preserve">
    <value>Uninstall x64 .NET Core bundles only</value>
  </data>
  <data name="X86OptionDescription" xml:space="preserve">
    <value>Uninstall x86 .NET Core bundles only</value>
  </data>
</root>